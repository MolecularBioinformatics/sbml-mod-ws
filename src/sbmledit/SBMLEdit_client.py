##################################################
# file: SBMLEdit_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     ./bin/gencode
# 
##################################################

from SBMLEdit_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class SBMLEditLocator:
    SBMLEditSOAP_address = "http://localhost:8080/sbmledit"
    def getSBMLEditSOAPAddress(self):
        return SBMLEditLocator.SBMLEditSOAP_address
    def getSBMLEditSOAP(self, url=None, **kw):
        return SBMLEditSOAPSOAP(url or SBMLEditLocator.SBMLEditSOAP_address, **kw)

# Methods
class SBMLEditSOAPSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: ReplaceGlobalParameters
    def ReplaceGlobalParameters(self, request, **kw):
        if isinstance(request, ReplaceGlobalParametersRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ReplaceGlobalParameters", **kw)
        # no output wsaction
        response = self.binding.Receive(ReplaceGlobalParametersResponse.typecode)
        return response

    # op: ReplaceKineticLawParameter
    def ReplaceKineticLawParameter(self, request, **kw):
        if isinstance(request, ReplaceKineticLawParameterRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ReplaceKineticLawParameter", **kw)
        # no output wsaction
        response = self.binding.Receive(ReplaceKineticLawParameterResponse.typecode)
        return response

    # op: ValidateSBMLModel
    def ValidateSBMLModel(self, request, **kw):
        if isinstance(request, ValidateSBMLModelRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ValidateSBMLModel", **kw)
        # no output wsaction
        response = self.binding.Receive(ValidateSBMLModelResponse.typecode)
        return response

    # op: ScaleKineticLawParameter
    def ScaleKineticLawParameter(self, request, **kw):
        if isinstance(request, ScaleKineticLawParameterRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ScaleKineticLawParameter", **kw)
        # no output wsaction
        response = self.binding.Receive(ScaleKineticLawParameterResponse.typecode)
        return response

    # op: AddKineticLawParameter
    def AddKineticLawParameter(self, request, **kw):
        if isinstance(request, AddKineticLawParameterRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/AddKineticLawParameter", **kw)
        # no output wsaction
        response = self.binding.Receive(AddKineticLawParameterResponse.typecode)
        return response

    # op: AddBoundsToKineticLaw
    def AddBoundsToKineticLaw(self, request, **kw):
        if isinstance(request, AddBoundsToKineticLawRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/AddBoundsToKineticLaw", **kw)
        # no output wsaction
        response = self.binding.Receive(AddBoundsToKineticLawResponse.typecode)
        return response

    # op: ReplaceInitialConcentrationsOfSpecies
    def ReplaceInitialConcentrationsOfSpecies(self, request, **kw):
        if isinstance(request, ReplaceInitialConcentrationsOfSpeciesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ReplaceInitialConcentrationsOfSpecies", **kw)
        # no output wsaction
        response = self.binding.Receive(ReplaceInitialConcentrationsOfSpeciesResponse.typecode)
        return response

    # op: GetVersion
    def GetVersion(self, request, **kw):
        if isinstance(request, GetVersionRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/GetVersion", **kw)
        # no output wsaction
        response = self.binding.Receive(GetVersionResponse.typecode)
        return response

    # op: ValidateSBMLModelText
    def ValidateSBMLModelText(self, request, **kw):
        if isinstance(request, ValidateSBMLModelTextRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ValidateSBMLModelText", **kw)
        # no output wsaction
        response = self.binding.Receive(ValidateSBMLModelTextResponse.typecode)
        return response

    # op: ValidateSBMLModelBase64Encoded
    def ValidateSBMLModelBase64Encoded(self, request, **kw):
        if isinstance(request, ValidateSBMLModelBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ValidateSBMLModelBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(ValidateSBMLModelBase64EncodedResponse.typecode)
        return response

    # op: ValidateSBMLModelGzippedBase64Encoded
    def ValidateSBMLModelGzippedBase64Encoded(self, request, **kw):
        if isinstance(request, ValidateSBMLModelGzippedBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ValidateSBMLModelGzippedBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(ValidateSBMLModelGzippedBase64EncodedResponse.typecode)
        return response

    # op: ReplaceGlobalParametersText
    def ReplaceGlobalParametersText(self, request, **kw):
        if isinstance(request, ReplaceGlobalParametersTextRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ReplaceGlobalParametersText", **kw)
        # no output wsaction
        response = self.binding.Receive(ReplaceGlobalParametersTextResponse.typecode)
        return response

    # op: ReplaceGlobalParametersBase64Encoded
    def ReplaceGlobalParametersBase64Encoded(self, request, **kw):
        if isinstance(request, ReplaceGlobalParametersBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ReplaceGlobalParametersBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(ReplaceGlobalParametersBase64EncodedResponse.typecode)
        return response

    # op: ReplaceGlobalParametersGzippedBase64Encoded
    def ReplaceGlobalParametersGzippedBase64Encoded(self, request, **kw):
        if isinstance(request, ReplaceGlobalParametersGzippedBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ReplaceGlobalParametersGzippedBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(ReplaceGlobalParametersGzippedBase64EncodedResponse.typecode)
        return response

    # op: ReplaceKineticLawParameterText
    def ReplaceKineticLawParameterText(self, request, **kw):
        if isinstance(request, ReplaceKineticLawParameterTextRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ReplaceKineticLawParameterText", **kw)
        # no output wsaction
        response = self.binding.Receive(ReplaceKineticLawParameterTextResponse.typecode)
        return response

    # op: ReplaceKineticLawParameterBase64Encoded
    def ReplaceKineticLawParameterBase64Encoded(self, request, **kw):
        if isinstance(request, ReplaceKineticLawParameterBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ReplaceKineticLawParameterBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(ReplaceKineticLawParameterBase64EncodedResponse.typecode)
        return response

    # op: ReplaceKineticLawParameterGzippedBase64Encoded
    def ReplaceKineticLawParameterGzippedBase64Encoded(self, request, **kw):
        if isinstance(request, ReplaceKineticLawParameterGzippedBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ReplaceKineticLawParameterGzippedBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(ReplaceKineticLawParameterGzippedBase64EncodedResponse.typecode)
        return response

    # op: ScaleKineticLawParameterText
    def ScaleKineticLawParameterText(self, request, **kw):
        if isinstance(request, ScaleKineticLawParameterTextRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ScaleKineticLawParameterText", **kw)
        # no output wsaction
        response = self.binding.Receive(ScaleKineticLawParameterTextResponse.typecode)
        return response

    # op: ScaleKineticLawParameterBase64Encoded
    def ScaleKineticLawParameterBase64Encoded(self, request, **kw):
        if isinstance(request, ScaleKineticLawParameterBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ScaleKineticLawParameterBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(ScaleKineticLawParameterBase64EncodedResponse.typecode)
        return response

    # op: ScaleKineticLawParameterGzippedBase64Encoded
    def ScaleKineticLawParameterGzippedBase64Encoded(self, request, **kw):
        if isinstance(request, ScaleKineticLawParameterGzippedBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ScaleKineticLawParameterGzippedBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(ScaleKineticLawParameterGzippedBase64EncodedResponse.typecode)
        return response

    # op: AddBoundsToKineticLawText
    def AddBoundsToKineticLawText(self, request, **kw):
        if isinstance(request, AddBoundsToKineticLawTextRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/AddBoundsToKineticLawText", **kw)
        # no output wsaction
        response = self.binding.Receive(AddBoundsToKineticLawTextResponse.typecode)
        return response

    # op: AddBoundsToKineticLawBase64Encoded
    def AddBoundsToKineticLawBase64Encoded(self, request, **kw):
        if isinstance(request, AddBoundsToKineticLawBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/AddBoundsToKineticLawBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(AddBoundsToKineticLawBase64EncodedResponse.typecode)
        return response

    # op: AddBoundsToKineticLawGzippedBase64Encoded
    def AddBoundsToKineticLawGzippedBase64Encoded(self, request, **kw):
        if isinstance(request, AddBoundsToKineticLawGzippedBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/AddBoundsToKineticLawGzippedBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(AddBoundsToKineticLawGzippedBase64EncodedResponse.typecode)
        return response

    # op: ReplaceInitialConcentrationsOfSpeciesText
    def ReplaceInitialConcentrationsOfSpeciesText(self, request, **kw):
        if isinstance(request, ReplaceInitialConcentrationsOfSpeciesTextRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ReplaceInitialConcentrationsOfSpeciesText", **kw)
        # no output wsaction
        response = self.binding.Receive(ReplaceInitialConcentrationsOfSpeciesTextResponse.typecode)
        return response

    # op: ReplaceInitialConcentrationsOfSpeciesBase64Encoded
    def ReplaceInitialConcentrationsOfSpeciesBase64Encoded(self, request, **kw):
        if isinstance(request, ReplaceInitialConcentrationsOfSpeciesBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ReplaceInitialConcentrationsOfSpeciesBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(ReplaceInitialConcentrationsOfSpeciesBase64EncodedResponse.typecode)
        return response

    # op: ReplaceInitialConcentrationsOfSpeciesGzippedBase64Encoded
    def ReplaceInitialConcentrationsOfSpeciesGzippedBase64Encoded(self, request, **kw):
        if isinstance(request, ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ReplaceInitialConcentrationsOfSpeciesGzippedBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedResponse.typecode)
        return response

    # op: ScaleGlobalParametersText
    def ScaleGlobalParametersText(self, request, **kw):
        if isinstance(request, ScaleGlobalParametersTextRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ScaleGlobalParametersText", **kw)
        # no output wsaction
        response = self.binding.Receive(ScaleGlobalParametersTextResponse.typecode)
        return response

    # op: ScaleGlobalParametersBase64Encoded
    def ScaleGlobalParametersBase64Encoded(self, request, **kw):
        if isinstance(request, ScaleGlobalParametersBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ScaleGlobalParametersBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(ScaleGlobalParametersBase64EncodedResponse.typecode)
        return response

    # op: ScaleGlobalParametersGzippedBase64Encoded
    def ScaleGlobalParametersGzippedBase64Encoded(self, request, **kw):
        if isinstance(request, ScaleGlobalParametersGzippedBase64EncodedRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://esysbio.org/service/bio/SBMLEdit/ScaleGlobalParametersGzippedBase64Encoded", **kw)
        # no output wsaction
        response = self.binding.Receive(ScaleGlobalParametersGzippedBase64EncodedResponse.typecode)
        return response

ReplaceGlobalParametersRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceGlobalParameters").pyclass

ReplaceGlobalParametersResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceGlobalParametersResponse").pyclass

ReplaceKineticLawParameterRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceKineticLawParameter").pyclass

ReplaceKineticLawParameterResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceKineticLawParameterResponse").pyclass

ValidateSBMLModelRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ValidateSBMLModel").pyclass

ValidateSBMLModelResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ValidateSBMLModelResponse").pyclass

ScaleKineticLawParameterRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleKineticLawParameter").pyclass

ScaleKineticLawParameterResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleKineticLawParameterResponse").pyclass

AddKineticLawParameterRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "AddKineticLawParameter").pyclass

AddKineticLawParameterResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "AddKineticLawParameterResponse").pyclass

AddBoundsToKineticLawRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "AddBoundsToKineticLaw").pyclass

AddBoundsToKineticLawResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "AddBoundsToKineticLawResponse").pyclass

ReplaceInitialConcentrationsOfSpeciesRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceInitialConcentrationsOfSpecies").pyclass

ReplaceInitialConcentrationsOfSpeciesResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceInitialConcentrationsOfSpeciesResponse").pyclass

GetVersionRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "GetVersion").pyclass

GetVersionResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "GetVersionResponse").pyclass

ValidateSBMLModelTextRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ValidateSBMLModelText").pyclass

ValidateSBMLModelTextResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ValidateSBMLModelTextResponse").pyclass

ValidateSBMLModelBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ValidateSBMLModelBase64Encoded").pyclass

ValidateSBMLModelBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ValidateSBMLModelBase64EncodedResponse").pyclass

ValidateSBMLModelGzippedBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ValidateSBMLModelGzippedBase64Encoded").pyclass

ValidateSBMLModelGzippedBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ValidateSBMLModelGzippedBase64EncodedResponse").pyclass

ReplaceGlobalParametersTextRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceGlobalParametersText").pyclass

ReplaceGlobalParametersTextResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceGlobalParametersTextResponse").pyclass

ReplaceGlobalParametersBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceGlobalParametersBase64Encoded").pyclass

ReplaceGlobalParametersBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceGlobalParametersBase64EncodedResponse").pyclass

ReplaceGlobalParametersGzippedBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceGlobalParametersGzippedBase64Encoded").pyclass

ReplaceGlobalParametersGzippedBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceGlobalParametersGzippedBase64EncodedResponse").pyclass

ReplaceKineticLawParameterTextRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceKineticLawParameterText").pyclass

ReplaceKineticLawParameterTextResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceKineticLawParameterTextResponse").pyclass

ReplaceKineticLawParameterBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceKineticLawParameterBase64Encoded").pyclass

ReplaceKineticLawParameterBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceKineticLawParameterBase64EncodedResponse").pyclass

ReplaceKineticLawParameterGzippedBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceKineticLawParameterGzippedBase64Encoded").pyclass

ReplaceKineticLawParameterGzippedBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceKineticLawParameterGzippedBase64EncodedResponse").pyclass

ScaleKineticLawParameterTextRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleKineticLawParameterText").pyclass

ScaleKineticLawParameterTextResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleKineticLawParameterTextResponse").pyclass

ScaleKineticLawParameterBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleKineticLawParameterBase64Encoded").pyclass

ScaleKineticLawParameterBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleKineticLawParameterBase64EncodedResponse").pyclass

ScaleKineticLawParameterGzippedBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleKineticLawParameterGzippedBase64Encoded").pyclass

ScaleKineticLawParameterGzippedBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleKineticLawParameterGzippedBase64EncodedResponse").pyclass

AddBoundsToKineticLawTextRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "AddBoundsToKineticLawText").pyclass

AddBoundsToKineticLawTextResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "AddBoundsToKineticLawTextResponse").pyclass

AddBoundsToKineticLawBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "AddBoundsToKineticLawBase64Encoded").pyclass

AddBoundsToKineticLawBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "AddBoundsToKineticLawBase64EncodedResponse").pyclass

AddBoundsToKineticLawGzippedBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "AddBoundsToKineticLawGzippedBase64Encoded").pyclass

AddBoundsToKineticLawGzippedBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "AddBoundsToKineticLawGzippedBase64EncodedResponse").pyclass

ReplaceInitialConcentrationsOfSpeciesTextRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceInitialConcentrationsOfSpeciesText").pyclass

ReplaceInitialConcentrationsOfSpeciesTextResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceInitialConcentrationsOfSpeciesTextResponse").pyclass

ReplaceInitialConcentrationsOfSpeciesBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceInitialConcentrationsOfSpeciesBase64Encoded").pyclass

ReplaceInitialConcentrationsOfSpeciesBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceInitialConcentrationsOfSpeciesBase64EncodedResponse").pyclass

ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceInitialConcentrationsOfSpeciesGzippedBase64Encoded").pyclass

ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedResponse").pyclass

ScaleGlobalParametersTextRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleGlobalParametersText").pyclass

ScaleGlobalParametersTextResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleGlobalParametersTextResponse").pyclass

ScaleGlobalParametersBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleGlobalParametersBase64Encoded").pyclass

ScaleGlobalParametersBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleGlobalParametersBase64EncodedResponse").pyclass

ScaleGlobalParametersGzippedBase64EncodedRequest = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleGlobalParametersGzippedBase64Encoded").pyclass

ScaleGlobalParametersGzippedBase64EncodedResponse = GED("http://esysbio.org/service/bio/SBMLEdit", "ScaleGlobalParametersGzippedBase64EncodedResponse").pyclass
