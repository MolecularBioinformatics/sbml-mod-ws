##################################################
# file: SBMLEdit_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    bin/gencode
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://esysbio.org/service/bio/SBMLEdit
##############################

class ns0:
    targetNamespace = "http://esysbio.org/service/bio/SBMLEdit"

    class MergeModeType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        type = (schema, "MergeModeType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FaultType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        type = (schema, "FaultType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FaultType_Def.schema
            TClist = [GED("http://esysbio.org/service/bio/SBMLEdit","FaultEnum",lazy=False, isref=True)(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="FaultMessage", aname="_FaultMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FaultEnum = None
                    self._FaultMessage = None
                    return
            Holder.__name__ = "FaultType_Holder"
            self.pyclass = Holder

    class FaultEnumType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        type = (schema, "FaultEnumType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SbmlModelFilesType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        type = (schema, "SbmlModelFilesType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SbmlModelFilesType_Def.schema
            TClist = [ZSI.TC.String(pname="Name", aname="_Name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SbmlModelFile", aname="_SbmlModelFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._SbmlModelFile = None
                    return
            Holder.__name__ = "SbmlModelFilesType_Holder"
            self.pyclass = Holder

    class ListSbmlModelFiles_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        type = (schema, "ListSbmlModelFiles")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListSbmlModelFiles_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ListSbmlModelFiles_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParameters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParameters"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParameters_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParameters")
            kw["aname"] = "_ReplaceGlobalParameters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._DataColumnNumber = None
                    self._SbmlModelFiles = []
                    self._DataFile = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ReplaceGlobalParameters_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParametersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParametersResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParametersResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParametersResponse")
            kw["aname"] = "_ReplaceGlobalParametersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ReplaceGlobalParametersResponse_Holder"
            self.pyclass = Holder

    class ReplaceKineticLawParameter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceKineticLawParameter"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceKineticLawParameter_Dec.schema
            TClist = [ZSI.TC.String(pname="ParameterId", aname="_ParameterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceKineticLawParameter")
            kw["aname"] = "_ReplaceKineticLawParameter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ParameterId = None
                    self._DataColumnNumber = None
                    self._MergeMode = None
                    self._SbmlModelFiles = []
                    self._DataFile = None
                    self._MappingFile = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ReplaceKineticLawParameter_Holder"
            self.pyclass = Holder

    class ReplaceKineticLawParameterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceKineticLawParameterResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceKineticLawParameterResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceKineticLawParameterResponse")
            kw["aname"] = "_ReplaceKineticLawParameterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ReplaceKineticLawParameterResponse_Holder"
            self.pyclass = Holder

    class ScaleKineticLawParameter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleKineticLawParameter"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleKineticLawParameter_Dec.schema
            TClist = [ZSI.TC.String(pname="ParameterId", aname="_ParameterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MergeMode", aname="_MergeMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleKineticLawParameter")
            kw["aname"] = "_ScaleKineticLawParameter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ParameterId = None
                    self._DataColumnNumber = None
                    self._MergeMode = None
                    self._SbmlModelFiles = []
                    self._DataFile = None
                    self._MappingFile = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ScaleKineticLawParameter_Holder"
            self.pyclass = Holder

    class ScaleKineticLawParameterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleKineticLawParameterResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleKineticLawParameterResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleKineticLawParameterResponse")
            kw["aname"] = "_ScaleKineticLawParameterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ScaleKineticLawParameterResponse_Holder"
            self.pyclass = Holder

    class AddKineticLawParameter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddKineticLawParameter"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.AddKineticLawParameter_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ParameterId", aname="_ParameterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DefaultValue", aname="_DefaultValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","AddKineticLawParameter")
            kw["aname"] = "_AddKineticLawParameter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._ParameterId = None
                    self._DefaultValue = None
                    self._DataColumnNumber = None
                    self._MergeMode = None
                    self._MappingFile = None
                    self._DataFile = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "AddKineticLawParameter_Holder"
            self.pyclass = Holder

    class AddKineticLawParameterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddKineticLawParameterResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.AddKineticLawParameterResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","AddKineticLawParameterResponse")
            kw["aname"] = "_AddKineticLawParameterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "AddKineticLawParameterResponse_Holder"
            self.pyclass = Holder

    class AddBoundsToKineticLaw_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddBoundsToKineticLaw"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.AddBoundsToKineticLaw_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DefaultValue", aname="_DefaultValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","AddBoundsToKineticLaw")
            kw["aname"] = "_AddBoundsToKineticLaw"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DefaultValue = None
                    self._DataColumnNumber = None
                    self._MergeMode = None
                    self._MappingFile = None
                    self._DataFile = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "AddBoundsToKineticLaw_Holder"
            self.pyclass = Holder

    class AddBoundsToKineticLawResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddBoundsToKineticLawResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.AddBoundsToKineticLawResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","AddBoundsToKineticLawResponse")
            kw["aname"] = "_AddBoundsToKineticLawResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "AddBoundsToKineticLawResponse_Holder"
            self.pyclass = Holder

    class ReplaceInitialConcentrationsOfSpecies_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceInitialConcentrationsOfSpecies"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceInitialConcentrationsOfSpecies_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceInitialConcentrationsOfSpecies")
            kw["aname"] = "_ReplaceInitialConcentrationsOfSpecies"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DataFile = None
                    self._MappingFile = None
                    self._DataColumnNumber = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ReplaceInitialConcentrationsOfSpecies_Holder"
            self.pyclass = Holder

    class ReplaceInitialConcentrationsOfSpeciesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceInitialConcentrationsOfSpeciesResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceInitialConcentrationsOfSpeciesResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceInitialConcentrationsOfSpeciesResponse")
            kw["aname"] = "_ReplaceInitialConcentrationsOfSpeciesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ReplaceInitialConcentrationsOfSpeciesResponse_Holder"
            self.pyclass = Holder

    class ValidateSBMLModel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ValidateSBMLModel"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ValidateSBMLModel_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFile", aname="_SbmlModelFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ValidateSBMLModel")
            kw["aname"] = "_ValidateSBMLModel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFile = None
                    return
            Holder.__name__ = "ValidateSBMLModel_Holder"
            self.pyclass = Holder

    class ValidateSBMLModelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ValidateSBMLModelResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ValidateSBMLModelResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="ModelIsValid", aname="_ModelIsValid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ErrorMessages", aname="_ErrorMessages", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ValidateSBMLModelResponse")
            kw["aname"] = "_ValidateSBMLModelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ModelIsValid = None
                    self._ErrorMessages = []
                    return
            Holder.__name__ = "ValidateSBMLModelResponse_Holder"
            self.pyclass = Holder

    class SBMLEditFault_Dec(ElementDeclaration):
        literal = "SBMLEditFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","SBMLEditFault")
            kw["aname"] = "_SBMLEditFault"
            if ns0.FaultType_Def not in ns0.SBMLEditFault_Dec.__bases__:
                bases = list(ns0.SBMLEditFault_Dec.__bases__)
                bases.insert(0, ns0.FaultType_Def)
                ns0.SBMLEditFault_Dec.__bases__ = tuple(bases)

            ns0.FaultType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SBMLEditFault_Dec_Holder"

    class FaultEnum_Dec(ElementDeclaration):
        literal = "FaultEnum"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","FaultEnum")
            kw["aname"] = "_FaultEnum"
            if ns0.FaultEnumType_Def not in ns0.FaultEnum_Dec.__bases__:
                bases = list(ns0.FaultEnum_Dec.__bases__)
                bases.insert(0, ns0.FaultEnumType_Def)
                ns0.FaultEnum_Dec.__bases__ = tuple(bases)

            ns0.FaultEnumType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "FaultEnum_Dec_Holder"

    class GetVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetVersion"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.GetVersion_Dec.schema
            TClist = []
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","GetVersion")
            kw["aname"] = "_GetVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "GetVersion_Holder"
            self.pyclass = Holder

    class GetVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetVersionResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.GetVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="Version", aname="_Version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","GetVersionResponse")
            kw["aname"] = "_GetVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Version = None
                    return
            Holder.__name__ = "GetVersionResponse_Holder"
            self.pyclass = Holder

    class ValidateSBMLModelText_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ValidateSBMLModelText"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ValidateSBMLModelText_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFile", aname="_SbmlModelFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ValidateSBMLModelText")
            kw["aname"] = "_ValidateSBMLModelText"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFile = None
                    return
            Holder.__name__ = "ValidateSBMLModelText_Holder"
            self.pyclass = Holder

    class ValidateSBMLModelTextResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ValidateSBMLModelTextResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ValidateSBMLModelTextResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="ModelIsValid", aname="_ModelIsValid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ErrorMessages", aname="_ErrorMessages", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ValidateSBMLModelTextResponse")
            kw["aname"] = "_ValidateSBMLModelTextResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ModelIsValid = None
                    self._ErrorMessages = []
                    return
            Holder.__name__ = "ValidateSBMLModelTextResponse_Holder"
            self.pyclass = Holder

    class ValidateSBMLModelBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ValidateSBMLModelBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ValidateSBMLModelBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFile", aname="_SbmlModelFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ValidateSBMLModelBase64Encoded")
            kw["aname"] = "_ValidateSBMLModelBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFile = None
                    return
            Holder.__name__ = "ValidateSBMLModelBase64Encoded_Holder"
            self.pyclass = Holder

    class ValidateSBMLModelBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ValidateSBMLModelBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ValidateSBMLModelBase64EncodedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="ModelIsValid", aname="_ModelIsValid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ErrorMessages", aname="_ErrorMessages", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ValidateSBMLModelBase64EncodedResponse")
            kw["aname"] = "_ValidateSBMLModelBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ModelIsValid = None
                    self._ErrorMessages = []
                    return
            Holder.__name__ = "ValidateSBMLModelBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class ValidateSBMLModelGzippedBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ValidateSBMLModelGzippedBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ValidateSBMLModelGzippedBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFile", aname="_SbmlModelFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ValidateSBMLModelGzippedBase64Encoded")
            kw["aname"] = "_ValidateSBMLModelGzippedBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFile = None
                    return
            Holder.__name__ = "ValidateSBMLModelGzippedBase64Encoded_Holder"
            self.pyclass = Holder

    class ValidateSBMLModelGzippedBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ValidateSBMLModelGzippedBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ValidateSBMLModelGzippedBase64EncodedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="ModelIsValid", aname="_ModelIsValid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ErrorMessages", aname="_ErrorMessages", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ValidateSBMLModelGzippedBase64EncodedResponse")
            kw["aname"] = "_ValidateSBMLModelGzippedBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ModelIsValid = None
                    self._ErrorMessages = []
                    return
            Holder.__name__ = "ValidateSBMLModelGzippedBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParametersText_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParametersText"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParametersText_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParametersText")
            kw["aname"] = "_ReplaceGlobalParametersText"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MergeMode = None
                    self._MappingFile = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ReplaceGlobalParametersText_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParametersTextResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParametersTextResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParametersTextResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParametersTextResponse")
            kw["aname"] = "_ReplaceGlobalParametersTextResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ReplaceGlobalParametersTextResponse_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParametersTextFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParametersTextFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParametersTextFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ReplaceGlobalParametersTextFault", aname="_ReplaceGlobalParametersTextFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParametersTextFault")
            kw["aname"] = "_ReplaceGlobalParametersTextFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ReplaceGlobalParametersTextFault = None
                    return
            Holder.__name__ = "ReplaceGlobalParametersTextFault_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParametersBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParametersBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParametersBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParametersBase64Encoded")
            kw["aname"] = "_ReplaceGlobalParametersBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MergeMode = None
                    self._MappingFile = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ReplaceGlobalParametersBase64Encoded_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParametersBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParametersBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParametersBase64EncodedResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParametersBase64EncodedResponse")
            kw["aname"] = "_ReplaceGlobalParametersBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ReplaceGlobalParametersBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParametersBase64EncodedFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParametersBase64EncodedFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParametersBase64EncodedFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ReplaceGlobalParametersBase64EncodedFault", aname="_ReplaceGlobalParametersBase64EncodedFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParametersBase64EncodedFault")
            kw["aname"] = "_ReplaceGlobalParametersBase64EncodedFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ReplaceGlobalParametersBase64EncodedFault = None
                    return
            Holder.__name__ = "ReplaceGlobalParametersBase64EncodedFault_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParametersGzippedBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParametersGzippedBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParametersGzippedBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParametersGzippedBase64Encoded")
            kw["aname"] = "_ReplaceGlobalParametersGzippedBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MergeMode = None
                    self._MappingFile = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ReplaceGlobalParametersGzippedBase64Encoded_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParametersGzippedBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParametersGzippedBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParametersGzippedBase64EncodedResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParametersGzippedBase64EncodedResponse")
            kw["aname"] = "_ReplaceGlobalParametersGzippedBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ReplaceGlobalParametersGzippedBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParametersGzippedBase64EncodedFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParametersGzippedBase64EncodedFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParametersGzippedBase64EncodedFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ReplaceGlobalParametersGzippedBase64EncodedFault", aname="_ReplaceGlobalParametersGzippedBase64EncodedFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParametersGzippedBase64EncodedFault")
            kw["aname"] = "_ReplaceGlobalParametersGzippedBase64EncodedFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ReplaceGlobalParametersGzippedBase64EncodedFault = None
                    return
            Holder.__name__ = "ReplaceGlobalParametersGzippedBase64EncodedFault_Holder"
            self.pyclass = Holder

    class ReplaceKineticLawParameterText_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceKineticLawParameterText"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceKineticLawParameterText_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ParameterId", aname="_ParameterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceKineticLawParameterText")
            kw["aname"] = "_ReplaceKineticLawParameterText"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._ParameterId = None
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ReplaceKineticLawParameterText_Holder"
            self.pyclass = Holder

    class ReplaceKineticLawParameterTextResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceKineticLawParameterTextResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceKineticLawParameterTextResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceKineticLawParameterTextResponse")
            kw["aname"] = "_ReplaceKineticLawParameterTextResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ReplaceKineticLawParameterTextResponse_Holder"
            self.pyclass = Holder

    class ReplaceKineticLawParameterBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceKineticLawParameterBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceKineticLawParameterBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ParameterId", aname="_ParameterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceKineticLawParameterBase64Encoded")
            kw["aname"] = "_ReplaceKineticLawParameterBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._ParameterId = None
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ReplaceKineticLawParameterBase64Encoded_Holder"
            self.pyclass = Holder

    class ReplaceKineticLawParameterBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceKineticLawParameterBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceKineticLawParameterBase64EncodedResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceKineticLawParameterBase64EncodedResponse")
            kw["aname"] = "_ReplaceKineticLawParameterBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ReplaceKineticLawParameterBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class ReplaceKineticLawParameterGzippedBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceKineticLawParameterGzippedBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceKineticLawParameterGzippedBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ParameterId", aname="_ParameterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceKineticLawParameterGzippedBase64Encoded")
            kw["aname"] = "_ReplaceKineticLawParameterGzippedBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._ParameterId = None
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ReplaceKineticLawParameterGzippedBase64Encoded_Holder"
            self.pyclass = Holder

    class ReplaceKineticLawParameterGzippedBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceKineticLawParameterGzippedBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceKineticLawParameterGzippedBase64EncodedResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceKineticLawParameterGzippedBase64EncodedResponse")
            kw["aname"] = "_ReplaceKineticLawParameterGzippedBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ReplaceKineticLawParameterGzippedBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class ReplaceKineticLawParameterTextFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceKineticLawParameterTextFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceKineticLawParameterTextFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ReplaceKineticLawParameterTextFault", aname="_ReplaceKineticLawParameterTextFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceKineticLawParameterTextFault")
            kw["aname"] = "_ReplaceKineticLawParameterTextFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ReplaceKineticLawParameterTextFault = None
                    return
            Holder.__name__ = "ReplaceKineticLawParameterTextFault_Holder"
            self.pyclass = Holder

    class ReplaceKineticLawParameterBase64EncodedFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceKineticLawParameterBase64EncodedFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceKineticLawParameterBase64EncodedFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ReplaceKineticLawParameterBase64EncodedFault", aname="_ReplaceKineticLawParameterBase64EncodedFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceKineticLawParameterBase64EncodedFault")
            kw["aname"] = "_ReplaceKineticLawParameterBase64EncodedFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ReplaceKineticLawParameterBase64EncodedFault = None
                    return
            Holder.__name__ = "ReplaceKineticLawParameterBase64EncodedFault_Holder"
            self.pyclass = Holder

    class ReplaceKineticLawParameterGzippedBase64EncodedFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceKineticLawParameterGzippedBase64EncodedFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceKineticLawParameterGzippedBase64EncodedFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ReplaceKineticLawParameterGzippedBase64EncodedFault", aname="_ReplaceKineticLawParameterGzippedBase64EncodedFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceKineticLawParameterGzippedBase64EncodedFault")
            kw["aname"] = "_ReplaceKineticLawParameterGzippedBase64EncodedFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ReplaceKineticLawParameterGzippedBase64EncodedFault = None
                    return
            Holder.__name__ = "ReplaceKineticLawParameterGzippedBase64EncodedFault_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParametersBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParametersBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParametersBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ParameterId", aname="_ParameterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParametersBase64Encoded")
            kw["aname"] = "_ReplaceGlobalParametersBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._ParameterId = None
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ReplaceGlobalParametersBase64Encoded_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParametersBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParametersBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParametersBase64EncodedResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParametersBase64EncodedResponse")
            kw["aname"] = "_ReplaceGlobalParametersBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ReplaceGlobalParametersBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class ReplaceGlobalParamtersBase64EncodedFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceGlobalParamtersBase64EncodedFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceGlobalParamtersBase64EncodedFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ReplaceGlobalParamtersBase64EncodedFault", aname="_ReplaceGlobalParamtersBase64EncodedFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceGlobalParamtersBase64EncodedFault")
            kw["aname"] = "_ReplaceGlobalParamtersBase64EncodedFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ReplaceGlobalParamtersBase64EncodedFault = None
                    return
            Holder.__name__ = "ReplaceGlobalParamtersBase64EncodedFault_Holder"
            self.pyclass = Holder

    class ScaleKineticLawParameterText_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleKineticLawParameterText"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleKineticLawParameterText_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ParameterId", aname="_ParameterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleKineticLawParameterText")
            kw["aname"] = "_ScaleKineticLawParameterText"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._ParameterId = None
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ScaleKineticLawParameterText_Holder"
            self.pyclass = Holder

    class ScaleKineticLawParameterTextResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleKineticLawParameterTextResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleKineticLawParameterTextResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleKineticLawParameterTextResponse")
            kw["aname"] = "_ScaleKineticLawParameterTextResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ScaleKineticLawParameterTextResponse_Holder"
            self.pyclass = Holder

    class ScaleKineticLawParameterBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleKineticLawParameterBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleKineticLawParameterBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ParameterId", aname="_ParameterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleKineticLawParameterBase64Encoded")
            kw["aname"] = "_ScaleKineticLawParameterBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._ParameterId = None
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ScaleKineticLawParameterBase64Encoded_Holder"
            self.pyclass = Holder

    class ScaleKineticLawParameterBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleKineticLawParameterBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleKineticLawParameterBase64EncodedResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleKineticLawParameterBase64EncodedResponse")
            kw["aname"] = "_ScaleKineticLawParameterBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ScaleKineticLawParameterBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class ScaleKineticLawParameterGzippedBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleKineticLawParameterGzippedBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleKineticLawParameterGzippedBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ParameterId", aname="_ParameterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleKineticLawParameterGzippedBase64Encoded")
            kw["aname"] = "_ScaleKineticLawParameterGzippedBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._ParameterId = None
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ScaleKineticLawParameterGzippedBase64Encoded_Holder"
            self.pyclass = Holder

    class ScaleKineticLawParameterGzippedBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleKineticLawParameterGzippedBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleKineticLawParameterGzippedBase64EncodedResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleKineticLawParameterGzippedBase64EncodedResponse")
            kw["aname"] = "_ScaleKineticLawParameterGzippedBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ScaleKineticLawParameterGzippedBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class ScaleKineticLawParameterTextFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleKineticLawParameterTextFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleKineticLawParameterTextFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ScaleKineticLawParameterTextFault", aname="_ScaleKineticLawParameterTextFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleKineticLawParameterTextFault")
            kw["aname"] = "_ScaleKineticLawParameterTextFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ScaleKineticLawParameterTextFault = None
                    return
            Holder.__name__ = "ScaleKineticLawParameterTextFault_Holder"
            self.pyclass = Holder

    class ScaleKineticLawParameterBase64EncodedFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleKineticLawParameterBase64EncodedFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleKineticLawParameterBase64EncodedFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ScaleKineticLawParameterBase64EncodedFault", aname="_ScaleKineticLawParameterBase64EncodedFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleKineticLawParameterBase64EncodedFault")
            kw["aname"] = "_ScaleKineticLawParameterBase64EncodedFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ScaleKineticLawParameterBase64EncodedFault = None
                    return
            Holder.__name__ = "ScaleKineticLawParameterBase64EncodedFault_Holder"
            self.pyclass = Holder

    class ScaleKineticLawParameterGzippedBase64EncodedFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleKineticLawParameterGzippedBase64EncodedFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleKineticLawParameterGzippedBase64EncodedFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ScaleKineticLawParameterGzippedBase64EncodedFault", aname="_ScaleKineticLawParameterGzippedBase64EncodedFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleKineticLawParameterGzippedBase64EncodedFault")
            kw["aname"] = "_ScaleKineticLawParameterGzippedBase64EncodedFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ScaleKineticLawParameterGzippedBase64EncodedFault = None
                    return
            Holder.__name__ = "ScaleKineticLawParameterGzippedBase64EncodedFault_Holder"
            self.pyclass = Holder

    class AddBoundsToKineticLawText_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddBoundsToKineticLawText"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.AddBoundsToKineticLawText_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DefaultValue", aname="_DefaultValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","AddBoundsToKineticLawText")
            kw["aname"] = "_AddBoundsToKineticLawText"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DefaultValue = None
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "AddBoundsToKineticLawText_Holder"
            self.pyclass = Holder

    class AddBoundsToKineticLawTextResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddBoundsToKineticLawTextResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.AddBoundsToKineticLawTextResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","AddBoundsToKineticLawTextResponse")
            kw["aname"] = "_AddBoundsToKineticLawTextResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "AddBoundsToKineticLawTextResponse_Holder"
            self.pyclass = Holder

    class AddBoundsToKineticLawBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddBoundsToKineticLawBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.AddBoundsToKineticLawBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DefaultValue", aname="_DefaultValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","AddBoundsToKineticLawBase64Encoded")
            kw["aname"] = "_AddBoundsToKineticLawBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DefaultValue = None
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "AddBoundsToKineticLawBase64Encoded_Holder"
            self.pyclass = Holder

    class AddBoundsToKineticLawBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddBoundsToKineticLawBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.AddBoundsToKineticLawBase64EncodedResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","AddBoundsToKineticLawBase64EncodedResponse")
            kw["aname"] = "_AddBoundsToKineticLawBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "AddBoundsToKineticLawBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class AddBoundsToKineticLawGzippedBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddBoundsToKineticLawGzippedBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.AddBoundsToKineticLawGzippedBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DefaultValue", aname="_DefaultValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","AddBoundsToKineticLawGzippedBase64Encoded")
            kw["aname"] = "_AddBoundsToKineticLawGzippedBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DefaultValue = None
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "AddBoundsToKineticLawGzippedBase64Encoded_Holder"
            self.pyclass = Holder

    class AddBoundsToKineticLawGzippedBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddBoundsToKineticLawGzippedBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.AddBoundsToKineticLawGzippedBase64EncodedResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","AddBoundsToKineticLawGzippedBase64EncodedResponse")
            kw["aname"] = "_AddBoundsToKineticLawGzippedBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "AddBoundsToKineticLawGzippedBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class AddBoundsToKineticLawTextFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddBoundsToKineticLawTextFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.AddBoundsToKineticLawTextFault_Dec.schema
            TClist = [ZSI.TC.String(pname="AddBoundsToKineticLawTextFault", aname="_AddBoundsToKineticLawTextFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","AddBoundsToKineticLawTextFault")
            kw["aname"] = "_AddBoundsToKineticLawTextFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AddBoundsToKineticLawTextFault = None
                    return
            Holder.__name__ = "AddBoundsToKineticLawTextFault_Holder"
            self.pyclass = Holder

    class AddBoundsToKineticLawBase64EncodedFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddBoundsToKineticLawBase64EncodedFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.AddBoundsToKineticLawBase64EncodedFault_Dec.schema
            TClist = [ZSI.TC.String(pname="AddBoundsToKineticLawBase64EncodedFault", aname="_AddBoundsToKineticLawBase64EncodedFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","AddBoundsToKineticLawBase64EncodedFault")
            kw["aname"] = "_AddBoundsToKineticLawBase64EncodedFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AddBoundsToKineticLawBase64EncodedFault = None
                    return
            Holder.__name__ = "AddBoundsToKineticLawBase64EncodedFault_Holder"
            self.pyclass = Holder

    class AddBoundsToKineticLawGzippedBase64EncodedFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AddBoundsToKineticLawGzippedBase64EncodedFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.AddBoundsToKineticLawGzippedBase64EncodedFault_Dec.schema
            TClist = [ZSI.TC.String(pname="AddBoundsToKineticLawGzippedBase64EncodedFault", aname="_AddBoundsToKineticLawGzippedBase64EncodedFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","AddBoundsToKineticLawGzippedBase64EncodedFault")
            kw["aname"] = "_AddBoundsToKineticLawGzippedBase64EncodedFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AddBoundsToKineticLawGzippedBase64EncodedFault = None
                    return
            Holder.__name__ = "AddBoundsToKineticLawGzippedBase64EncodedFault_Holder"
            self.pyclass = Holder

    class ReplaceInitialConcentrationsOfSpeciesText_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceInitialConcentrationsOfSpeciesText"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceInitialConcentrationsOfSpeciesText_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceInitialConcentrationsOfSpeciesText")
            kw["aname"] = "_ReplaceInitialConcentrationsOfSpeciesText"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ReplaceInitialConcentrationsOfSpeciesText_Holder"
            self.pyclass = Holder

    class ReplaceInitialConcentrationsOfSpeciesTextResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceInitialConcentrationsOfSpeciesTextResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceInitialConcentrationsOfSpeciesTextResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceInitialConcentrationsOfSpeciesTextResponse")
            kw["aname"] = "_ReplaceInitialConcentrationsOfSpeciesTextResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ReplaceInitialConcentrationsOfSpeciesTextResponse_Holder"
            self.pyclass = Holder

    class ReplaceInitialConcentrationsOfSpeciesBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceInitialConcentrationsOfSpeciesBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceInitialConcentrationsOfSpeciesBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceInitialConcentrationsOfSpeciesBase64Encoded")
            kw["aname"] = "_ReplaceInitialConcentrationsOfSpeciesBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ReplaceInitialConcentrationsOfSpeciesBase64Encoded_Holder"
            self.pyclass = Holder

    class ReplaceInitialConcentrationsOfSpeciesBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceInitialConcentrationsOfSpeciesBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceInitialConcentrationsOfSpeciesBase64EncodedResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceInitialConcentrationsOfSpeciesBase64EncodedResponse")
            kw["aname"] = "_ReplaceInitialConcentrationsOfSpeciesBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ReplaceInitialConcentrationsOfSpeciesBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class ReplaceInitialConcentrationsOfSpeciesGzippedBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceInitialConcentrationsOfSpeciesGzippedBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceInitialConcentrationsOfSpeciesGzippedBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceInitialConcentrationsOfSpeciesGzippedBase64Encoded")
            kw["aname"] = "_ReplaceInitialConcentrationsOfSpeciesGzippedBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ReplaceInitialConcentrationsOfSpeciesGzippedBase64Encoded_Holder"
            self.pyclass = Holder

    class ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedResponse")
            kw["aname"] = "_ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class ReplaceInitialConcentrationsOfSpeciesTextFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceInitialConcentrationsOfSpeciesTextFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceInitialConcentrationsOfSpeciesTextFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ReplaceInitialConcentrationsOfSpeciesTextFault", aname="_ReplaceInitialConcentrationsOfSpeciesTextFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceInitialConcentrationsOfSpeciesTextFault")
            kw["aname"] = "_ReplaceInitialConcentrationsOfSpeciesTextFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ReplaceInitialConcentrationsOfSpeciesTextFault = None
                    return
            Holder.__name__ = "ReplaceInitialConcentrationsOfSpeciesTextFault_Holder"
            self.pyclass = Holder

    class ReplaceInitialConcentrationsOfSpeciesBase64EncodedFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceInitialConcentrationsOfSpeciesBase64EncodedFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceInitialConcentrationsOfSpeciesBase64EncodedFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ReplaceInitialConcentrationsOfSpeciesBase64EncodedFault", aname="_ReplaceInitialConcentrationsOfSpeciesBase64EncodedFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceInitialConcentrationsOfSpeciesBase64EncodedFault")
            kw["aname"] = "_ReplaceInitialConcentrationsOfSpeciesBase64EncodedFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ReplaceInitialConcentrationsOfSpeciesBase64EncodedFault = None
                    return
            Holder.__name__ = "ReplaceInitialConcentrationsOfSpeciesBase64EncodedFault_Holder"
            self.pyclass = Holder

    class ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedFault", aname="_ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedFault")
            kw["aname"] = "_ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedFault = None
                    return
            Holder.__name__ = "ReplaceInitialConcentrationsOfSpeciesGzippedBase64EncodedFault_Holder"
            self.pyclass = Holder

    class ScaleGlobalParametersText_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleGlobalParametersText"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleGlobalParametersText_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleGlobalParametersText")
            kw["aname"] = "_ScaleGlobalParametersText"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ScaleGlobalParametersText_Holder"
            self.pyclass = Holder

    class ScaleGlobalParametersTextResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleGlobalParametersTextResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleGlobalParametersTextResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleGlobalParametersTextResponse")
            kw["aname"] = "_ScaleGlobalParametersTextResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ScaleGlobalParametersTextResponse_Holder"
            self.pyclass = Holder

    class ScaleGlobalParametersBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleGlobalParametersBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleGlobalParametersBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleGlobalParametersBase64Encoded")
            kw["aname"] = "_ScaleGlobalParametersBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ScaleGlobalParametersBase64Encoded_Holder"
            self.pyclass = Holder

    class ScaleGlobalParametersBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleGlobalParametersBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleGlobalParametersBase64EncodedResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleGlobalParametersBase64EncodedResponse")
            kw["aname"] = "_ScaleGlobalParametersBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ScaleGlobalParametersBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class ScaleGlobalParametersGzippedBase64Encoded_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleGlobalParametersGzippedBase64Encoded"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleGlobalParametersGzippedBase64Encoded_Dec.schema
            TClist = [ZSI.TC.String(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DataFile", aname="_DataFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="DataColumnNumber", aname="_DataColumnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MappingFile", aname="_MappingFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://esysbio.org/service/bio/SBMLEdit","MergeModeType",lazy=False)(pname="MergeMode", aname="_MergeMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BatchMode", aname="_BatchMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleGlobalParametersGzippedBase64Encoded")
            kw["aname"] = "_ScaleGlobalParametersGzippedBase64Encoded"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._DataFile = None
                    self._DataColumnNumber = None
                    self._MappingFile = None
                    self._MergeMode = None
                    self._BatchMode = None
                    return
            Holder.__name__ = "ScaleGlobalParametersGzippedBase64Encoded_Holder"
            self.pyclass = Holder

    class ScaleGlobalParametersGzippedBase64EncodedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleGlobalParametersGzippedBase64EncodedResponse"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleGlobalParametersGzippedBase64EncodedResponse_Dec.schema
            TClist = [GTD("http://esysbio.org/service/bio/SBMLEdit","SbmlModelFilesType",lazy=False)(pname="SbmlModelFiles", aname="_SbmlModelFiles", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Warnings", aname="_Warnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleGlobalParametersGzippedBase64EncodedResponse")
            kw["aname"] = "_ScaleGlobalParametersGzippedBase64EncodedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SbmlModelFiles = []
                    self._Warnings = []
                    return
            Holder.__name__ = "ScaleGlobalParametersGzippedBase64EncodedResponse_Holder"
            self.pyclass = Holder

    class ScaleGlobalParametersTextFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleGlobalParametersTextFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleGlobalParametersTextFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ScaleGlobalParametersTextFault", aname="_ScaleGlobalParametersTextFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleGlobalParametersTextFault")
            kw["aname"] = "_ScaleGlobalParametersTextFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ScaleGlobalParametersTextFault = None
                    return
            Holder.__name__ = "ScaleGlobalParametersTextFault_Holder"
            self.pyclass = Holder

    class ScaleGlobalParametersBase64EncodedFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleGlobalParametersBase64EncodedFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleGlobalParametersBase64EncodedFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ScaleGlobalParametersBase64EncodedFault", aname="_ScaleGlobalParametersBase64EncodedFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleGlobalParametersBase64EncodedFault")
            kw["aname"] = "_ScaleGlobalParametersBase64EncodedFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ScaleGlobalParametersBase64EncodedFault = None
                    return
            Holder.__name__ = "ScaleGlobalParametersBase64EncodedFault_Holder"
            self.pyclass = Holder

    class ScaleGlobalParametersGzippedBase64EncodedFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ScaleGlobalParametersGzippedBase64EncodedFault"
        schema = "http://esysbio.org/service/bio/SBMLEdit"
        def __init__(self, **kw):
            ns = ns0.ScaleGlobalParametersGzippedBase64EncodedFault_Dec.schema
            TClist = [ZSI.TC.String(pname="ScaleGlobalParametersGzippedBase64EncodedFault", aname="_ScaleGlobalParametersGzippedBase64EncodedFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://esysbio.org/service/bio/SBMLEdit","ScaleGlobalParametersGzippedBase64EncodedFault")
            kw["aname"] = "_ScaleGlobalParametersGzippedBase64EncodedFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ScaleGlobalParametersGzippedBase64EncodedFault = None
                    return
            Holder.__name__ = "ScaleGlobalParametersGzippedBase64EncodedFault_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://esysbio.org/service/bio/SBMLEdit)
